The ```1-my_list``` module
==========================

Using ```MyList```
---------------------

MyList is a class that inherits from the builtin list class.
It creates a list, and has a method ```print_sorted``` that prints the list in ascending order
For sorting, the class assumes every element of the list is an integer
First, import ```MyList``` from ```1-my_list``` module:

::

    >>> MyList = __import__('1-my_list').MyList

::

Confirm if ```MyList``` inherits from list:

::

    >>> issubclass(MyList, list)
    True

::

When an instance of MyList is created, it becomes a list.
The my_list instance below should create an empty list.

::

    >>> my_list = MyList()
    >>> my_list
    []

::

Check if my_list is actually a list:

::

    >>> isinstance(my_list, list)
    True

::

Confirm ```my_list``` is instance of MyList:

::

    >>> type(my_list) == MyList
    True

::


All attributes of the list are available for the ```my_list``` variable.

::

    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)

::

Trying to print the appended list:

::

    >>> my_list
    [1, 4, 2, 3, 5]

::

Calling ```print_sorted``` to print the list in asc order:

::

    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

::

Confirming that the ```my_list``` was not changed:

::

    >>> my_list
    [1, 4, 2, 3, 5]

::


Checking if ```print_sorted``` is a method:

::

    >>> type(my_list.print_sorted)
    <class 'method'>

::

Calling the class with a parameter that is a list creates that list:

::

    >>> my_list = MyList([1,1,3,4,5,])
    >>> my_list
    [1, 1, 3, 4, 5]

::

Printing a sorted list with elements of same value:

::

    >>> my_list = MyList([1,1,3,4])
    >>> my_list.print_sorted()
    [1, 1, 3, 4]

::

Printing sorted list of positive and negative values:

::

    >>> my_list = MyList([1,-4, -8, 2, 3, 5])
    >>> my_list.print_sorted()
    [-8, -4, 1, 2, 3, 5]

::

Printing a sorted list with only one value:

::

    >>> my_list = MyList([5])
    >>> my_list.print_sorted()
    [5]

::


Invalid Cases
-------------
Passing None will raise an error:

::

    >>> my_list = MyList(None)
    Traceback (most recent call last):
        ...
    TypeError: 'NoneType' object is not iterable

::
Passing more than one parameter when Calling the class will raise an error:

::

    >>> my_list = MyList([1, 2, 3], [1 , 2], [])
    Traceback (most recent call last):
        ...
    TypeError: list expected at most 1 argument, got 3

::

Passing an non-iterable parameter also fails when creating the class instance also raises an error:

::

    >>> my_list = MyList(1)
    Traceback (most recent call last):
        ...
    TypeError: 'int' object is not iterable

::

Passing parameters into the ```print_sorted``` method also raises an error:

::

    >>> my_list.print_sorted([1,2,3])
    Traceback (most recent call last):
        ...
    TypeError: MyList.print_sorted() takes 1 positional argument but 2 were given

::


When an instance of MyList is created, it is similar to creating a list.
The my_list instance below creates an empty list.
::
    >>> my_list = MyList()
    >>> my_list
    []

::

All attributes of the list are available for the my_list variable.
::
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)

::

Trying to print the appended list:
::
    >>> my_list
    [1, 4, 2, 3, 5]

::
Calling ```print_sorted``` to print the list in asc order:
::
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

::
Calling the class with a parameter that is a list creates that list:
::
    >>> my_list = MyList([1,1,3,4,5,])
    >>> my_list
    [1, 1, 3, 4, 5]

::
Printing a sorted list with elements of same value:
::
    >>> my_list = MyList([1,1,3,4])
    >>> my_list.print_sorted()
    [1, 1, 3, 4]

::
Printing a sorted list with only one value:
::
    >>> my_list = MyList([5])
    >>> my_list.print_sorted()
    [5]

::
The created list can be mutated just like any other list:

::
    >>> my_list = MyList([1, 2, 3, 4, 5])
    >>> my_list[3] = 1000
    >>> my_list
    [1, 2, 3, 1000, 5]

::
Passing an iterable object that is not a list, will however work, but the iterable
object will be parsed into a list:
::
    >>> my_list = MyList('rr')
    >>> my_list
    ['r', 'r']

::
And the list can also be deleted:
::
    >>> del(my_list)
    >>> my_list
    Traceback (most recent call last):
        ...
    NameError: name 'my_list' is not defined

::
Invalid Cases
-------------
Passing None will raise an error:
::
    >>> my_list = MyList(None)
    Traceback (most recent call last):
        ...
    TypeError: 'NoneType' object is not iterable

::
Passing more than one parameter will raise an error:
::
    >>> my_list = MyList([1, 2, 3], [1 , 2], [])
    Traceback (most recent call last):
        ...
    TypeError: list expected at most 1 argument, got 3

::
Passing an non-iterable parameter also fails when creating the class instance also raises an error:
::
    >>> my_list = MyList(1)
    Traceback (most recent call last):
        ...
    TypeError: 'int' object is not iterable

::