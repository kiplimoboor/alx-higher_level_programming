The ``1-my_list_module``
==========================

Using ```MyList``
------------------

First import class ``MyList`` from the ``1-my_list_module``:

    >>> MyList = __import__('1-my_list').MyList

Now use it:
Calling the ``MyList`` creates an empty list, in this case ``my_list``:

    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>
    >>> my_list
    []

``MyList`` can also be called with a single argument, that must be an iterable:

    >>> my_list = MyList([1, 2, 3])
    >>> print(my_list)
    [1, 2, 3]

    >>> my_list = MyList(None)
    Traceback (most recent call last):
        ...
    TypeError: 'NoneType' object is not iterable


A ``TypeError`` will be raised for any more than one instantiation arguments.

    >>> my_list = MyList([1, 2], [3, 4])
    Traceback (most recent call last):
        ...
    TypeError: list expected at most 1 argument, got 2

Sorting an empty list:
    >>> my_list.print_sorted()
    []

Populating ``my_list``

    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)

Checking if list is populated:    

    >>> my_list
    [1, 4, 2, 3, 5]

Displaying the list sorted in asc order using method ``print_sorted``:

    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

Check if ``print_sorted`` altered the passed list:
    
    >>> my_list
    [1, 4, 2, 3, 5]

Using ``print_sorted`` with elements of equal value in list:

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.print_sorted()
    [1, 1, 2, 3]

Using ``print_sorted`` with both negative and positive values

    >>> my_list.append(-2)
    >>> my_list.append(-3)
    >>> my_list.print_sorted()
    [-3, -2, 1, 1, 2, 3]
    
Using ``print_sorted`` with a 0

    >>> my_list.append(0)
    >>> my_list.print_sorted()
    [-3, -2, 0, 1, 1, 2, 3]